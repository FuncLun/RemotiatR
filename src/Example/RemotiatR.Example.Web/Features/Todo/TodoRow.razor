@using RemotiatR.Example.Shared.Features.Todo
@using static TodosPage;

@inject IMapper _mapper;
@inject IRemotiatr _remotiatr;

<tr>
    @if (Todo.IsEditing && Todo.Id == default)
    {
        <td><input type="text" @bind="Todo.Title" /></td>
        <td></td>
        <td></td>
        <td class="text-right">
            <button class="btn btn-primary btn-sm" @onclick="async () => await OnClickSave(Todo)">Save</button>
            <button class="btn btn-default btn-sm" @onclick="async () => await OnClickCancel(Todo)">Cancel</button>
        </td>
    }
    else if (Todo.IsEditing && Todo.Id != default)
    {
        <td><input type="text" @bind="Todo.Title" /></td>
        <td>@Todo.Created</td>
        <td>@Todo.LastEdited</td>
        <td class="text-right">
            <button class="btn btn-primary btn-sm" @onclick="async () => await OnClickSave(Todo)">Save</button>
            <button class="btn btn-default btn-sm" @onclick="async () => await OnClickCancel(Todo)">Cancel</button>
        </td>
    }
    else
    {
        <td>@Todo.Title</td>
        <td>@Todo.Created</td>
        <td>@Todo.LastEdited</td>
        <td class="text-right">
            <button class="btn btn-primary btn-sm" @onclick="async () => await OnClickEdit(Todo)">Edit</button>
            <button class="btn btn-danger btn-sm" @onclick="async () => await OnClickDelete(Todo)">Delete</button>
        </td>
    }
</tr>

@code {
    [Parameter]
    public TodosViewModel Todo { get; set; }

    [Parameter]
    public EventCallback OnClearValidation { get; set; }

    [Parameter]
    public EventCallback<TodosViewModel> OnRemoveTodo { get; set; }

    [Parameter]
    public EventCallback OnSortTodos { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<ValidationFailure>> OnSetValidationErrors { get; set; }

    private async Task OnClickEdit(TodosViewModel todo)
    {
        todo.PreviousState = _mapper.Map<TodosViewModel.PreviousStateViewModel>(todo);
        todo.IsEditing = true;

        await OnClearValidation.InvokeAsync(null);
    }

    private async Task OnClickSave(TodosViewModel todo)
    {
        var validationResult = await ValidationScope.Run(async () =>
        {
            if (todo.Id == default)
            {
                var request = _mapper.Map<Create_Todos.Request>(todo);

                var result = await _remotiatr.Send(request);

                _mapper.Map(result, todo);
            }
            else
            {
                var request = _mapper.Map<Edit_Todos.Request>(todo);

                var result = await _remotiatr.Send(request);

                _mapper.Map(result, todo);
            }

            todo.PreviousState = null;
            todo.IsEditing = false;
        });

        await OnSortTodos.InvokeAsync(null);
        await OnSetValidationErrors.InvokeAsync(validationResult.Errors);
    }

    private async Task OnClickDelete(TodosViewModel todo)
    {
        var validationResult = await ValidationScope.Run(async () =>
        {
            var request = _mapper.Map<Delete_Todos.Request>(todo);

            var result = await _remotiatr.Send(request);

            await OnRemoveTodo.InvokeAsync(todo);
        });

        await OnSetValidationErrors.InvokeAsync(validationResult.Errors);
    }

    private async Task OnClickCancel(TodosViewModel todo)
    {
        if (todo.PreviousState != null)
        {
            _mapper.Map(todo.PreviousState, todo);
            todo.PreviousState = null;
            todo.IsEditing = false;
        }
        else
        {
            await OnRemoveTodo.InvokeAsync(todo);
        }

        await OnClearValidation.InvokeAsync(null);
    }
}